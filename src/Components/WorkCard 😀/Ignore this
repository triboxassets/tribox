import React, { useEffect, useState } from 'react';
import './WorkCard.css';
import dummyhomecollection from '../../dummyhomecollection.json'; // Import the JSON data
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faStar } from '@fortawesome/free-solid-svg-icons'; // Import the star icon

interface WorkCardProps {
  productId: string; // Product ID passed as a prop
  buttonText: string;
}

interface Metafield {
  key: string;
  value: string;
}

const WorkCard: React.FC<WorkCardProps> = ({ productId, buttonText }) => {
  const [productData, setProductData] = useState<any>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    // Simulate fetching data from JSON file
    const product = dummyhomecollection.find((item: any) => item.id === productId);
    
    if (product) {
      setProductData(product);
    } else {
      setError('Product not found.');
    }
    setLoading(false); // End loading state
  }, [productId]);

  if (loading) return <div>Loading...</div>;
  if (error) return <div>{error}</div>;

  // Extract metafields
  const rating = productData?.metafields?.find((mf: Metafield) => mf.key === 'rating')?.value || 'N/A';
  const uploadDate = productData?.metafields?.find((mf: Metafield) => mf.key === 'upload_date')?.value || 'N/A';
  const fileFormat = productData?.metafields?.find((mf: Metafield) => mf.key === 'file_format')?.value || 'N/A';
  const author = productData?.metafields?.find((mf: Metafield) => mf.key === 'author')?.value || 'Unknown';
  const productType = productData?.productType || 'Default';

  // Function to map productType to accent color
  const getAccentColor = (type: string): string => {
    switch (type) {
      case '3D Models':
        return '#ED254E';
      case 'Mockups':
        return '#FFBE0B';
      case 'Templates':
        return '#A0ECD0';
      case 'Audio Samples':
        return '#6610F2';
      case 'Photos':
        return '#E5C1BD';
      case 'Presentation Templates':
        return '#9ED0E6';
      case 'Fonts':
        return '#61E294';
      default:
        return '#61E294'; // Default color
    }
  };

  const accentColor = getAccentColor(productType);

  return (
    <div 
      className="work-card" 
      style={{ '--accent-color': accentColor } as React.CSSProperties}
    >
      <img 
        className="work-card-image" 
        src={productData?.featuredImage?.src} 
        alt={productData?.featuredImage?.altText} 
      />
      
      {/* Display star icon and rating */}
      <div className="rating-badge">
        <FontAwesomeIcon icon={faStar} className="star-icon" /> {rating}
      </div>

      <h3 className="work-card-title">{productData?.title}</h3>

      <div className="work-card-meta">
        <p><strong>Upload Date </strong> <span>{uploadDate}</span></p>
        <p><strong>File Format </strong> <span>{fileFormat}</span></p>
        <p><strong>Author </strong> <span>{author}</span></p>
        <p className="work-card-tags">
          {productData?.tags?.map((tag: string, index: number) => (
            <span 
              key={index} 
              className="work-card-tag"
            >
              {tag}
            </span>
          ))} 
        </p>
      </div>

      <p 
        className="work-card-description" 
        dangerouslySetInnerHTML={{ __html: productData?.descriptionHtml }} 
      />

      <button 
        className="work-card-button"
      >
        {buttonText}
      </button>
    </div>
  );
};

export default WorkCard;
